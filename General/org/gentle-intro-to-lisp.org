* Gentle Intro to Lisp

* List functions

** CONS      
creates  one  new  cons  cell.
It  is  often  used  to  add  anelement to the front of a list.

** LIST    
makes  new  lists  by  accepting  an  arbitrary  number  of  inputs and building a *chain of cons cells* ending in NIL.
The car of each cell points to the corresponding input.

** APPEND    
appends  lists  together  by  copying  its  first  input  and making  the  cdr  of  the  last  cell  of  the  copy  point  to  the  second input.
It is an error for the first input to APPEND to be a non-list.

* Equality
- =EQ=
The fastest equality test:  It compares addresses.  
Experts use it  to  compare  symbols  quickly,  and  to  test  whether  two  cons  cellsare  physically  the  same  object.    
It  should  not  be  used  to  compare numbers.
- =EQL= 
Like EQ except it can safely compare numbers of the same type, such as two integers or two floating point numbers.  
It is the default equality test in Common Lisp.
- =EQUAL=  
The  predicate  beginners  should  use.    
It  compares  lists element by element; otherwise it works like EQL.
- =EQUALP= 
More liberal than EQUAL: It ignores case distinctions in strings, among other things.
=\== 
The most efficient way to compare numbers, and the only way to compare numbers of disparate types, such as 3 and 3.0.  
It only accepts numbers.

* Recursion

** Recursion Templates
 1. Double-test tail recursion.
 2. Single-test tail recursion.
 3. Single-test augmenting recursion.
 4. List-consing recursion.
 5. Simultaneous recursion on several variables.
 6. Conditional augmentation.
 7. Multiple recursive calls.
 8. CAR/CDR recursion.

* I/O
** Format
*** =~%= unconditional line break
*** =~&= line break if not already at the beginning of a line
*** =~S= insert sexp
*** =~A= insert sexp without escape characters

