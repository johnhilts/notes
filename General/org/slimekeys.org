* Format Code
** =Tab= at the beginning of each line will format it.
** re-indent a whole expression with the point on the opening =(= then =C-M-q=
** re-indent the whole body of a function from anywhere within it with =C-c M-q=
** close all parens in sexp =C-c C-]=

* Build code

** Compile =C-c C-c= runs the command slime-compile-defun, which in turn sends the definition to Lisp to be evaluated and compiled. 
- =(load(compile-file("c:/path/to/file")))= compiles and loads into current buffer
- =C-c C-l= is the shortcut for load and compile-file
- =C-c C-k= compile buffer.

* UI
- M-x invert-face<ret>default<ret> ; toggle light/dark mode
- (set-cursor-color "#ffffff") ; make the cursor visible

- clear buffer (useful if you have very large output in the repl)
=C-c M-o=

- stop running process
=C-c C-b=
*remember* hit C-b twice if inside temux!

** Window size
*note* this is emacs, not slime
=C-x -= (shrink-window-if-larger-than-buffer) 
=C-x += (balance-windows) will make windows the same heights and widths.
=C-x ^= (enlarge-window) increases the height by 1 line, or the prefix arg value. A negative arg shrinks the window. e.g. C-- C-1 C-6 C-x ^ shrinks by 16 rows, as does C-u - 1 6 C-x ^.
=C-x }= (enlarge-window-horizontally) 
=C-x {= (shrink-window-horizontally) 

=C-x z= Repeat
=z=  Continued repetition

* Navigate Code (not necessarily SLIME specific)
=CM-f/b= go to end/beginning of an expression
=M-h= select region
=CM-n/p= go to matching parenthesis

* Editting
=C-x u= undo edit
=C-_= redo edit
or, =C-?= (think "control shift /")
=C-x u C-x u= redo edit (undo the undo)

* Lisp source
=C-h m= get list of commands (for current mode)
=M-.= go to definition
=M-,= pop back out

** Documentation commands:
=C-c C-d C-d= Describe symbol.
=C-c C-d C-a= Apropos search.
=C-c M-d= Disassemble a function.

** Compiling
=C-c TAB= completion-at-point
=C-c RET= slime-expand-1 (expand macro)
=C-c C-p= slime-pprint-eval-last-expression
=C-c C-u= slime-undefine-function

** Debugging
=C-c I= slime-inspect
=C-c C-w c= slime-who-calls
=C-c C-t= slime-toggle-fancy-trace
=C-c RET= macro exapand interactively
=C-c M-d= slime-disassemble-symbol

** Profiling
(sb-profile:profile function-name) ; no need for any symbols, just the actual function name
(sb-profile:unprofile)
(sb-profile:report)
