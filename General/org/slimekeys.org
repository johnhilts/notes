* Format Code
** =Tab= at the beginning of each line will format it.
** re-indent a whole expression with the point on the opening =(= then =C-M-q=
** re-indent the whole body of a function from anywhere within it with =C-c M-q=
** close all parens in sexp =C-c C-]=

* Build code

** Compile =C-c C-c= runs the command slime-compile-defun, which in turn sends the definition to Lisp to be evaluated and compiled. 
- =(load(compile-file("c:/path/to/file")))= compiles and loads into current buffer
- =C-c C-l= is the shortcut for load and compile-file
- =C-c C-k= compile buffer.

* UI
- M-x invert-face<ret>default<ret> ; toggle light/dark mode
- (set-cursor-color "#ffffff") ; make the cursor visible

- clear buffer (useful if you have very large output in the repl)
=C-c M-o=

- stop running process
=C-c C-b=
*remember* hit C-b twice if inside temux!

** Window size
*note* this is emacs, not slime
=C-x -= (shrink-window-if-larger-than-buffer) 
=C-x += (balance-windows) will make windows the same heights and widths.
=C-x ^= (enlarge-window) increases the height by 1 line, or the prefix arg value. A negative arg shrinks the window. e.g. C-- C-1 C-6 C-x ^ shrinks by 16 rows, as does C-u - 1 6 C-x ^.
=C-x }= (enlarge-window-horizontally) 
=C-x {= (shrink-window-horizontally) 

=C-x z= Repeat
=z=  Continued repetition

* Navigate Code (not necessarily SLIME specific)
=CM-f/b= go to end/beginning of an expression
=M-h= select region
=CM-n/p= go to matching parenthesis

* Editting
=C-x u= undo edit
=C-_= redo edit
or, =C-?= (think "control shift /")
=C-x u C-x u= redo edit (undo the undo)

* Lisp source
=C-h m= get list of commands (for current mode)
=M-.= go to definition
=M-,= pop back out

** Documentation commands:
=C-c C-d C-d= Describe symbol.
=C-c C-d C-a= Apropos search.
=C-c M-d= Disassemble a function.

** Compiling
=C-c TAB= completion-at-point
=C-c RET= slime-expand-1 (expand macro)
=C-c C-p= slime-pprint-eval-last-expression
=C-c C-u= slime-undefine-function

** Debugging
=C-c I= slime-inspect
=C-c C-w c= slime-who-calls
=C-c C-t= slime-toggle-fancy-trace
=C-c RET= macro exapand interactively
=C-c M-d= slime-disassemble-symbol
=(declaim (optimize (speed 0) (space 0) (debug 3)))= include debugging symbols when compiling
=C-c C-v TAB= inspect object at point

** Profiling
(sb-profile:profile function-name) ; no need for any symbols, just the actual function name
(sb-profile:unprofile)
(sb-profile:report)
** Evaluating code
=C-c C-j= (slime-eval-last-expression-in-repl) 
=C-c C-y= call the current defun in the repl (it will allow you to enter params)
=C-c C-z= this is supposed to take you to the active window, but on at least some of my emacs this isn't defined
** Other possibly useful:
slime-who*
slime-list-compiler-notes
slime-trace-dialog-toggle-trace
slime-inspect-definition
slime-delete-system-fasls (Useful when .fasls are out-of-sync)
slime-profile-package, then run the desired functions, then slime-profile-report

** sexp editing

*** (from http://cl-cookbook.sourceforge.net/emacs-ide.html)
=C-M-t= Swap sexp
=C-M-Space= highlight sexp 
=C-M-u= expand the selection "upwards"
=C-M-k= delete sexp
=C-M-q= format
=M-x check-parens= locate mismatched parens in a buffer
=C-u 2 M-(= surround next 2 sexps with parentheses

**** Example of combining the above to extract from a progn then delete the progn
#+BEGIN_SRC lisp
;; To delete the enclosing "progn" below, put the cursor on the open
;; parens of the "(+ 1 1)" and press the following sequence of keys:
;; "C-M-k C-M-k C-M-k C-M-u C-M-k C-y M-y C-M-a C-M-q":

(defun a ()
  (progn 
    (+ 1 1)
    (+ 2 2)
    (+ 3 3)))
#+END_SRC

**** Folding
*warning* not very useful implementation ... makes folded code /invisible/
*Seems dangerous*
Including here just to know aobut it. Disabled by default in emacs.

=C-x n n= hide everything outside of region (kind of)
=C-x n w= unfold
=C-x n d= fold everything besides current defun (actually block)

***** Translations of shortcuts used in folding
=n= "narrow"
=w= "widen"
=d= "defun"

**** Comments
=M-;= toggle commenting of highlighted block. Creates "line comment" if nothing highlighted.
=M-q= wrap comments *and strings*

**** Searching
=M-x occur= grep a buffer. Standard emacs
=M-x grep= grep a buffer; supports regex. Standard emacs

**** diffing
=M-x ediff=

**** hyperspec (*haven't tested this yet*)
Use code similar to the following to access the HyperSpec from the Shift-F1 key:
#+BEGIN_SRC lisp
(global-set-key [(shift f1)]
		'(lambda ()
		   (interactive)
		   (let ((browse-url-browser-function 
                            'browse-url-w3)
		           (common-lisp-hyperspec-root            
                            "file://c:/home/docs/Hyperspec/")
	                           (common-lisp-hyperspec-symbol-table 
                             (concat common-lisp-hyperspec-root 
                                         "Data/Map_Sym.txt"))
		            (hyperspec-prog 
                             "c:/home/site/ilisp/extra/hyperspec"))
		     (load-library hyperspec-prog)
		     (common-lisp-hyperspec 
                        (thing-at-point 'symbol)))))
#+END_SRC

** Cross referencing
- From: https://lispcookbook.github.io/cl-cookbook/emacs-ide.html#evaluating-and-compiling-lisp-in-slime
C-c C-w c (slime-who-calls) callers of a function
C-c C-w m (slime-who-macroexpands) places where a macro is expanded
C-c C-w r (slime-who-references) global variable references
C-c C-w b (slime-who-bind) global variable bindings
C-c C-w s (slime-who-sets) global variable setters
C-c C-w a (slime-who-specializes) methods specialized on a symbol
And when the slime-asdf contrib is enabled, C-c C-w d (slime-who-depends-on) lists dependent ASDF systems

And a general binding: M-? or M-_ (slime-edit-uses) combines all of the above, it lists every kind of references.

** Synchronizing (very useful!!)
C-c ~ (slime-sync-package-and-default-directory): When run in a buffer with a lisp file it will change the current package of the REPL to the package of that file and also set the current directory of the REPL to the parent directory of the file.

* Debugging
C-u 3 C-c: compile with debugging information (Control-u 3 Control-c)

<<<<<<< HEAD
* Slime connection
** Hints on how to change the name
- from IRC:
 kagevf: you can pass the :name option to slime-start
07:55 <@luis> or you could add some advice to slime-generate-connection-name
07:55 <@luis> kagevf: (setf (slime-connection-name slime-default-connection) "new name") might work too
07:56 <@luis> an easier way to rename a connection would be nice. If you open an issue on github describing your use case, that slightly increases the odds of the
              feature being implemented :)
=======
* CLOS
M-x slime-who-specializes List methods specializing on a class

* Links
- https://bnmcgn.github.io/lisp-guide/lisp-exploration.html
- https://lispcookbook.github.io/cl-cookbook/emacs-ide.html#evaluating-and-compiling-lisp-in-slime
>>>>>>> 5801c652b28ddb16a618bb5947782c5cc4258865
